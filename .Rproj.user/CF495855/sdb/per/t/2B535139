{
    "contents" : "library(shiny)\nlibrary(fitdistrplus)\nlibrary(data.table)\n\nM <- read.csv(\"www/Melate.csv\")\nR <- subset(M, select=c(\"R1\",\"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\"))\n\nshinyServer(function(input, output) {\n\n    output$hist <- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    <- R[,input$select]\n        bins <- seq(0, max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, main=paste(\"Random Variable\",input$select),\n             breaks=bins,\n             prob=TRUE, col = 'lightblue', border = 'white')\n\n        if (input$densBox == TRUE){\n            lines(density(x, adjust=2), col=\"blue\", lwd=2)\n        }\n    })\n\n    output$docs <- renderUI({\n        withMathJax(\n        helpText('This application plays a lottery game using Mexico\\'s Melate'),\n        helpText('On left panel are all options you can select.'),\n        helpText('1. You can choose between 6 random variables R1-R6 to analyse.'),\n        helpText('2. Histogram panel shows the histogram of Random Variable chosen.'),\n        helpText('3 Plot Density Curve option shows density curve over hostogram. '),\n        helpText('4. You can chose number of bins shown in histogram by slyding bar.'),\n        helpText('5. Fitting Distribution optins allow you to select a distribution to haow well it'),\n\n        helpText('6. Models panel show all mathematical formulas of distribution models used.'),\n        helpText('7. Fit Panel shows four plots indicating how well a fit is.'),\n        helpText('8. Distribution Panel shows a Cullen and Frey graph which indicates how data are distributed.'),\n        helpText('9. Data Panel shows a data table with results of each random variable.'),\n        helpText('10. Play Panel shows three suggested games.')\n        )\n    })\n\n        output$models <- renderUI({\n        withMathJax(\n            helpText('Normal: $$f(x;\\\\mu,\\\\lambda) =\n                    \\\\frac{1}{\\\\sigma \\\\sqrt{2\\\\pi}}\n                    \\\\exp^{-\\\\frac{(x-\\\\mu)^2}{2\\\\sigma^2}}$$'),\n            helpText('Uniform: $$\n                     f(x)=\\\\begin{cases} \\\\frac{1}{b - a} & \\\\mathrm{for}\\\\ a \\\\le x\n                     \\\\le b,\\\\ 0 & \\\\mathrm{for}\\\\ x<a\\\\ \\\\mathrm{or}\\\\ x>b\n                     \\\\end{cases}$$ '),\n            helpText('Gamma:\n                     $$f(x) = \\\\lambda e^{-\\\\lambda x} \\\\frac{(\\\\lambda x)^{k-1}}\n                     {\\\\Gamma(k)} $$'),\n            helpText('Beta: $$f(x) = \\\\frac{\\\\Gamma(a+b)}{\\\\Gamma(a)\\\\Gamma(b)}\n                     x^{a-1}(1-x)^{b-1} $$'),\n            helpText('Logistic: $$F(x; \\\\mu,s) = \\\\frac{1}{1+e^{-(x-\\\\mu)/s}}$$'),\n            helpText('Exponential: $$\n                     f(x)= P(x)=\\\\left\\\\{\\\\begin{matrix} \\\\lambda e^{-\\\\lambda x}\n                    & \\\\quad \\\\text{for } x \\\\ge 0, \\\\ 0 \\\\text{ on the contrary}\n                    \\\\end{matrix}\\\\right.\n                     $$'),\n            helpText('Log-normal: $$f(x;\\\\mu,\\\\sigma) = \\\\frac{1}{x \\\\sigma\n                     \\\\sqrt{2 \\\\pi}} e^{-(\\\\ln(x) - \\\\mu)^2/2\\\\sigma^2} $$'),\n            helpText('Weibull: $$ f(x;\\\\lambda,k) = \\\\begin{cases}\n                     \\\\frac{k}{\\\\lambda}\\\\left(\\frac{x}{\\\\lambda}\\\\right)^{k-1}\n                     e^{-(x/\\\\lambda)^{k}} & x\\\\geq 0,\\\\ 0 x<0\\\\end{cases}$$')\n        )})\n\n\n\n    output$fit <- renderPlot({\n        x    <- R[,input$select]\n        # <- x/(max(x) + 0.0001)\n        #fit <- fitdist(x, distr=input$dist)\n        ##print(fit)\n        ##fit$aic\n        #plot(fit)\n        ##title(main=expression(paste(\"Distribution \",beta)))\n        #title(main=input$dist)\n        fw <- fitdist(x, distr=\"weibull\")\n        fg <- fitdist(x, distr=\"gamma\")\n        fl <- fitdist(x, distr=\"lnorm\")\n        par(mfrow = c(2, 2))\n        plot.legend <- c(\"Weibull\", \"lognormal\", \"gamma\")\n        denscomp(list(fw, fl, fg), legendtext = plot.legend)\n        qqcomp(list(fw, fl, fg), legendtext = plot.legend)\n        cdfcomp(list(fw, fl, fg), legendtext = plot.legend)\n        ppcomp(list(fw, fl, fg), legendtext = plot.legend)\n    })\n\n    output$dist <- renderPlot({\n        x    <- R[,input$select]\n        descdist(x, discrete = FALSE, boot=1000, boot.col=\"yellow\")\n    })\n\n    output$table <- renderDataTable({\n        data.frame(R)\n    })\n\n    output$play <- renderDataTable({\n        set.seed( as.integer((as.double(Sys.time())*1000+Sys.getpid()) %% 2^31))\n        gt <- data.table(c(0,0,0,0,0,0),c(0,0,0,0,0,0),\n                         c(0,0,0,0,0,0))\n        setnames(gt,c(\"Game 1\",\"Game 2\",\"Game 3\"))\n        j <- 1\n        for(r in c(\"R1\",\"R2\",\"R3\",\"R4\",\"R5\",\"R6\")){\n            x <- R[,r]\n            fit <- fitdist(x, \"norm\")\n            n <- round(rnorm(3,mean = fit$estimate[\"mean\"],\n                             sd = fit$estimate[\"sd\"]))\n            for(i in 1:3) gt[j,i] <- n[i]\n            j <- j + 1\n        }\n        gt\n    })\n})\n",
    "created" : 1443292077859.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "667064067",
    "id" : "2B535139",
    "lastKnownWriteTime" : 1445795832,
    "path" : "C:/Users/TOSHIBA/Desktop/Marquez - Coursera/Curso 9 - Developing data Products/Course_Project/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}